coupon page 











<%- include('./adminHeader.ejs') %>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">


<div class="col-lg-6 grid-margin stretch-card" style="width: 100%; table-layout: fixed; ">
    <div class="card">
      <div class="card-body">
       
        <p class="card-description">  <code>.</code>
        </p>
        <button type="button" class="btn btn-success" data-toggle="modal" data-target="#addCouponModal">
            Add Coupon
          </button><br><br>
        <div class="table-responsive">
          <table class="table table">
            <thead>
              <tr>
                <th style="width: 10%;">Code</th>
                <th style="width: 10%;">Discount</th>
                <th style="width: 15%;">ExpiryDate</th>
                <th style="width: 10%;">MinPurchaseAmount</th>
                <th style="width: 15%;">Action</th>
              </tr>
            </thead>
            <tbody>
                <% coupons.forEach(coupon => { %>
                    <tr>
                      <td><%= coupon.code %></td>
                      <td ><%= coupon.discountValue %> %</td>
                      <td class="text-danger"><%= new Date(coupon.expiryDate).toLocaleDateString() %></td>
                      <td>â‚¹ <%= coupon.minPurchaseAmount %>/-</td>
                      <td>
                        <button type="button" class="btn btn-warning edit-coupon-button" data-toggle="modal" data-target="#editCouponModal-<%= coupon._id %>">Edit</button>
                       
                        <button type="button" class="btn btn-danger delete-coupon-button" data-id="<%= coupon._id %>">Delete</button>
                      </td>
                    </tr>

                    <!-- edit modal -->

                   <div class="modal fade" id="editCouponModal-<%= coupon._id %>" style="margin-top: -5%;">
                   <div class="modal-dialog modal-dialog-centered">
                   <div class="modal-content">
      
                   <!-- Modal Header -->
                   <div class="modal-header" >
                   <h4 class="modal-title">Add Coupon</h4>
                   <button type="button" class="close" data-dismiss="modal">&times;</button>
                   </div>
        
                   <!-- Modal Body -->
               <div class="modal-body" >
                   <form id="editCouponModal-<%= coupon._id %>">
                    <input type="hidden" id="couponId-<%= coupon._id %>" name="couponId" value="<%= coupon._id %>">
            
               <div class="form-group">
                   <label for="code">Code:</label>
                   <input type="text" class="form-control" id="code" name="code" style="color: aliceblue;" value="<%= coupon  .code %>" required>
                   <small id="codeError" class="text-danger d-none">Code must be at least 4 characters long.</small>
             </div>
             <div class="form-group">
                   <label for="discountValue">Discount Value:</label>
                   <input type="number" class="form-control" id="discountValue" name="discountValue" style="color: aliceblue;" value="<%= coupon.discountValue %>" required>
                   <small id="DiscountError" class="text-danger d-none">Discount should be in 1 to 100.</small>
             </div>
             <% 
             const formatDate = (date) => {
                const d = new Date(date);
                  let month = '' + (d.getMonth() + 1);
                let day = '' + d.getDate();
             const year = d.getFullYear();

               if (month.length < 2) month = '0' + month;
                  if (day.length < 2) day = '0' + day;

                      return [year, month, day].join('-');
                    };

                 const formattedExpiryDate = formatDate(coupon.expiryDate);
                          %>
             <div class="form-group">
                   <label for="expiryDate">Expiry Date:</label>
                   <input type="date" class="form-control" id="expiryDate" name="expiryDate" style="color: aliceblue;" value="<%= formattedExpiryDate %>" required>
             </div>
             <div class="form-group">
                   <label for="minPurchaseAmount">Minimum Purchase Amount:</label>
                   <input type="number" class="form-control" id="minPurchaseAmount" style="color: aliceblue;" value="<%= coupon.minPurchaseAmount %>" name="minPurchaseAmount">
                   <small id="minPurchaseError" class="text-danger d-none">Minimum purchase amount must be at least 1000.</small>
            </div>
            <div class="form-group">
                   <label for="usageLimit">Usage Limit:</label>
                   <input type="number" class="form-control" id="usageLimit" style="color: aliceblue;" value="<%= coupon.usageLimit %>" name="usageLimit">
                   <small id="usageLimitError" class="text-danger d-none">Usage limit must be greater than 0.</small>
            </div>
                   <button type="submit" class="btn btn-primary">Submit</button>
                   </form>
            </div>
        
            </div>
            </div>
            </div>
                  <% }); %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

 <!-- The Modal -->
<div class="modal fade" id="addCouponModal" style="margin-top: -5%;">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
      
        <!-- Modal Header -->
        <div class="modal-header" >
          <h4 class="modal-title">Add Coupon</h4>
          <button type="button" class="close" data-dismiss="modal">&times;</button>
        </div>
        
        <!-- Modal Body -->
        <div class="modal-body" >
          <form id="addCouponForm">
            <div class="form-group">
              <label for="code">Code:</label>
              <input type="text" class="form-control" id="codes" name="code" style="color: aliceblue;" required>
              <small id="codeErrors" class="text-danger d-none">Code must be at least 4 characters long.</small>
            </div>
            <div class="form-group">
              <label for="discountValue">Discount Value:</label>
              <input type="number" class="form-control" id="discountValues" name="discountValue" style="color: aliceblue;" required>
              <small id="DiscountErrors" class="text-danger d-none">Discount should be in 1 to 100.</small>
            </div>
            <div class="form-group">
              <label for="expiryDate">Expiry Date:</label>
              <input type="date" class="form-control" id="expiryDates" name="expiryDate" style="color: aliceblue;" required>
            </div>
            <div class="form-group">
              <label for="minPurchaseAmount">Minimum Purchase Amount:</label>
              <input type="number" class="form-control" id="minPurchaseAmounts" style="color: aliceblue;" name="minPurchaseAmount">
              <small id="minPurchaseErrors" class="text-danger d-none">Minimum purchase amount must be at least 1000.</small>
            </div>
            <div class="form-group">
              <label for="usageLimit">Usage Limit:</label>
              <input type="number" class="form-control" id="usageLimits" style="color: aliceblue;" name="usageLimit">
              <small id="usageLimitErrors" class="text-danger d-none">Usage limit must be greater than 0.</small>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
          </form>
        </div>
        
      </div>
    </div>
  </div>



  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastify-js/1.12.0/toastify.min.js"></script>


  <script>
    document.getElementById('addCouponForm').addEventListener('submit', async function (event) {
      event.preventDefault();
      console.log('first error')
      const codeInput = document.getElementById('codes');
      const minPurchaseAmountInput = document.getElementById('minPurchaseAmounts');
      const usageLimitInput = document.getElementById('usageLimits');
      const codeError = document.getElementById('codeErrors');
      const minPurchaseError = document.getElementById('minPurchaseErrors');
      const usageLimitError = document.getElementById('usageLimitErrors');
      const discountInput = document.getElementById('discountValues')
      const discountError = document.getElementById('DiscountErrors');
      let isValid = true;
      
      if (codeInput.value.length < 4) {
        codeError.classList.remove('d-none');
        isValid = false;
      } else {
        codeError.classList.add('d-none');
      }
    
      if (parseFloat(minPurchaseAmountInput.value) < 500) {
        minPurchaseError.classList.remove('d-none');
        isValid = false;
      } else {
        minPurchaseError.classList.add('d-none');
      }
    
      if (parseFloat(usageLimitInput.value) <= 0) {
        usageLimitError.classList.remove('d-none');
        isValid = false;
      } else {
        usageLimitError.classList.add('d-none');
      }

    if(parseFloat(discountInput.value) < 1 || parseFloat(discountInput.value) > 100){
      discountError.classList.remove('d-none');
      isValid = false;
    } else {
      discountError.classList.add('d-none');
    }
    
      if (!isValid) {
        return;
      }
    
      const code = codeInput.value;
      const discountValue = document.getElementById('discountValues').value;
      const expiryDate = document.getElementById('expiryDates').value;
      const minPurchaseAmount = minPurchaseAmountInput.value;
      const usageLimit = usageLimitInput.value;
    
      try {
        const response = await fetch('/admin/addCoupon', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            code,
            discountValue,
            expiryDate,
            minPurchaseAmount,
            usageLimit
          })
        });
    
        const data = await response.json();
    
        if (response.ok) {
          Toastify({
            text: "Coupon added successfully",
            duration: 2000,
            backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
          }).showToast();
          setTimeout(() => location.reload(), 2000);
        } else {
          Toastify({
            text: data.message || 'Error adding coupon',
            duration: 3000,
            backgroundColor: "linear-gradient(to right, #ff5f6d, #ffc371)",
          }).showToast();
        }
      } catch (error) {
        console.error('Error:', error);
        Toastify({
          text: 'An error occurred while adding the coupon.',
          duration: 3000,
          backgroundColor: "linear-gradient(to right, #ff5f6d, #ffc371)",
        }).showToast();
      }
    });
    </script>

<script>
  document.getElementById('editCouponModal').addEventListener('submit', async function (event) {
    event.preventDefault();

    
    const codeInput = document.getElementById('code');
    const minPurchaseAmountInput = document.getElementById('minPurchaseAmount');
    const usageLimitInput = document.getElementById('usageLimit');
    const codeError = document.getElementById('codeError');
    const minPurchaseError = document.getElementById('minPurchaseError');
    const usageLimitError = document.getElementById('usageLimitError');
    const discountInput = document.getElementById('discountValue')
    const discountError = document.getElementById('DiscountError');
    let isValid = true;
  
    if (codeInput.value.length < 4) {
      codeError.classList.remove('d-none');
      isValid = false;
    } else {
      codeError.classList.add('d-none');
    }
  
    if (parseFloat(minPurchaseAmountInput.value) < 500) {
      minPurchaseError.classList.remove('d-none');
      isValid = false;
    } else {
      minPurchaseError.classList.add('d-none');
    }
  
    if (parseFloat(usageLimitInput.value) <= 0) {
      usageLimitError.classList.remove('d-none');
      isValid = false;
    } else {
      usageLimitError.classList.add('d-none');
    }

  if(parseFloat(discountInput.value) < 1 || parseFloat(discountInput.value) > 100){
    discountError.classList.remove('d-none');
    isValid = false;
  } else {
    discountError.classList.add('d-none');
  }
  
    if (!isValid) {
      return;
    }
    const couponId = document.getElementById('couponId').value;
    const code = codeInput.value;
    const discountValue = document.getElementById('discountValue').value;
    const expiryDate = document.getElementById('expiryDate').value;
    const minPurchaseAmount = minPurchaseAmountInput.value;
    const usageLimit = usageLimitInput.value;
  
    try {
      const response = await fetch(`/admin/editCoupon/${couponId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          code,
          discountValue,
          expiryDate,
          minPurchaseAmount,
          usageLimit
        })
      });
  
      const data = await response.json();
  
      if (response.ok) {
        Toastify({
          text: "Coupon updated successfully",
          duration: 2000,
          backgroundColor: "linear-gradient(to right, #00b09b, #96c93d)",
        }).showToast();
        setTimeout(() => location.reload(), 2000);
      } else {
        Toastify({
          text: data.message || 'Error adding coupon',
          duration: 3000,
          backgroundColor: "linear-gradient(to right, #ff5f6d, #ffc371)",
        }).showToast();
      }
    } catch (error) {
      console.error('Error:', error);
      Toastify({
        text: 'An error occurred while updating the coupon.',
        duration: 3000,
        backgroundColor: "linear-gradient(to right, #ff5f6d, #ffc371)",
      }).showToast();
    }
  });
  </script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>


<script>
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('.delete-coupon-button').forEach(button => {
        button.addEventListener('click', async function () {
          const couponId = this.getAttribute('data-id');
          
          const result = await Swal.fire({
            text: "ðŸ›‘Are you sure you want to delete this ?!",
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
          });
  
          if (result.isConfirmed) {
            try {
              const response = await fetch(`/admin/deleteCoupon/${couponId}`, {
                method: 'DELETE'
              });
  
              if (response.ok) {
                Swal.fire(
                  'Deleted!',
                  ' âœ… Your coupon has been deleted.',
                ).then(() => {
                  location.reload();
                });
              } else {
                Swal.fire(
                  'Error!',
                  'There was a problem deleting the coupon.',
                  'error'
                );
              }
            } catch (error) {
              console.error('Error:', error);
              Swal.fire(
                'Error!',
                'An error occurred while deleting the coupon.',
                'error'
              );
            }
          }
        });
      });
    });
  </script>
  
<%- include('./adminFooter.ejs') %>



edit product


<%- include('./adminHeader.ejs') %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

<div class="col-12 grid-margin stretch-card">
  <div class="card">
    <div class="card-body">
      <h4 class="card-title">Edit product</h4>
      <p class="card-description"></p>
      <form id="productForm" class="forms-sample" method="post" action="/admin/insertEditProducts?pid=<%= product._id %>" enctype="multipart/form-data">

        <div class="form-group">
          <label for="exampleInputName1">Name</label>
          <input type="text" class="form-control" id="exampleInputName1" style="color: rgb(252, 252, 252);width: 85%;" name="name" value="<%= product.name %>" >
          <small class="form-text text-danger" id="errorName"></small>
        </div>
        <div class="form-group">
          <label for="exampleSelectCategory">Category</label>
          <select class="form-control" id="exampleSelectCategory" style="color: rgb(252, 252, 252);width: 85%;" name="category" >
            <option><%= product.category %></option>
            <% for(let i=0;i<categories.length;i++){ %>
              <% if(categories[i].name !== product.category ) {%>
            <option><%=categories[i].name%></option>
               <%}%>
            <% } %>
          </select>
          <small class="form-text text-danger" id="errorCategory"></small>
        </div>
        <div class="form-group">
          <label for="exampleSelectBrand">Brand</label>
          <select class="form-control" id="exampleSelectBrand" style="color: rgb(252, 252, 252);width: 85%;" name="brand" >
            <option><%= product.brand %></option>
            <% for(let i=0;i<brands.length;i++){ %>
            <option><%=brands[i].name%></option>
            <% } %>
          </select>
          <small class="form-text text-danger" id="errorBrand"></small>
        </div>
        <div class="form-group">
          <label for="exampleInputModel">Model</label>
          <input type="text" class="form-control" id="exampleInputModel" style="color: rgb(252, 252, 252);width: 85%;" name="model" value="<%= product.model %>" >
          <small class="form-text text-danger" id="errorModel"></small>
        </div>
        <div class="form-group">
          <label for="exampleInputMaterial">Material</label>
          <input type="text" class="form-control" id="exampleInputMaterial" style="color: rgb(252, 252, 252);width: 85%;" name="material" value="<%= product.material %>" >
          <small class="form-text text-danger" id="errorMaterial"></small>
        </div>
        <div class="form-group">
          <label for="exampleInputPrice">Price</label>
          <input type="number" class="form-control" id="exampleInputPrice" style="color: rgb(252, 252, 252);width: 85%;" name="price" value="<%= product.price %>" >
          <small class="form-text text-danger" id="errorPrice"></small>
        </div>
        <div class="form-group" hidden>
          <label for="exampleInputDiscount">Discount</label>
          <input type="number" class="form-control" id="exampleInputDiscount" style="color: rgb(252, 252, 252);width: 85%;" name="discount" value="<%= product.discount %>" readonly>
          <small class="form-text text-danger" id="errorDiscount"></small>
        </div>
        <div class="form-group">
          <label for="exampleInputStock">Stock</label>
          <input type="number" class="form-control" id="exampleInputStock" style="color: rgb(252, 252, 252);width: 15%;" name="stock" value="<%= product.stock %>" >
          <small class="form-text text-danger" id="errorStock"></small>
        </div>
        <div class="form-group">
          <label for="exampleInputDescription">Description</label>
          <textarea class="form-control" id="exampleInputDescription" name="discription" style="color: rgb(252, 252, 252);width: 85%; height: 80px;" ><%= product.discription %></textarea>
          <small class="form-text text-danger" id="errorDescription"></small>
        </div>

        <div style="height: 100px; width: 30%;">
          <label for="ocs-productImage" class="ocs-product-label">Upload Image</label>
          <input type="file" id="ocs-productImage" name="image" class="form-control" multiple accept="image/*"
              onchange="previewImages()">
          <small id="imageError" class="form-text text-danger"></small>
      </div>
      <h4>Existing Images</h4>
      <div id="existingImagePreview" style="display: flex; flex-wrap: wrap;">
        <% if (product.image && product.image.length > 0) { %>
          <% product.image.forEach(image => { %>
            <div class="image-container" style="position: relative; margin: 5px;">
              <img src="/static/productImages/<%= image %>" alt="Product Image" style="width: 100px; height: 150px; object-fit: cover;" >
              <button type="button" class="btn btn-warning btn-sm" onclick="removeImage(this)">X</button>
            </div>
          <% }) %>
        <% } else { %>
          <p>No images available.</p>
        <% } %>
      </div>

      <h4>Added Images</h4>
      <div id="addedImagePreview" style="display: flex; flex-wrap: wrap;"></div><br>

      <button type="button" class="btn btn-secondary" onclick="openCropModal()">Crop Images</button><br><br>

      <div id="croppedImagesContainer"></div>

      <button type="submit" class="btn btn-primary me-2">Submit</button>
      <a href="/admin/products" class="btn btn-dark" style="text-decoration: none; color: white;">Cancel</a>
    </form>
    </div>
  </div>
</div>

<!-- Cropping Modal -->
<div class="modal fade" id="cropModal" tabindex="-1" role="dialog" aria-labelledby="cropModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="cropModalLabel">Crop Images</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="cropperContainer" style="display: flex; flex-wrap: wrap;"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="cropAllImages()">Crop</button>
            </div>
        </div>
    </div>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script>
  let croppers = [];
  let cropperElements = [];

  function openCropModal() {
    const cropperContainer = document.getElementById('cropperContainer');
    cropperContainer.innerHTML = '';
    const files = document.getElementById('ocs-productImage').files;

    if (files) {
      croppers = [];
      cropperElements = [];
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();

        reader.onload = (e) => {
          const img = document.createElement('img');
          img.src = e.target.result;
          img.style.maxWidth = '200px';
          img.style.margin = '10px';
          img.setAttribute('data-index', i);

          cropperContainer.appendChild(img);

          const cropper = new Cropper(img, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 1,
          });

          croppers.push(cropper);
          cropperElements.push(img);
        };

        reader.readAsDataURL(file);
      }
    }

    $('#cropModal').modal('show');
  }

  function cropAllImages() {
    const croppedImagesContainer = document.getElementById('croppedImagesContainer');
    croppedImagesContainer.innerHTML = '';

    croppers.forEach((cropper, index) => {
      const canvas = cropper.getCroppedCanvas();
      const src = canvas.toDataURL();

      const imgContainer = document.createElement('div');
      imgContainer.style.position = 'relative';
      imgContainer.style.margin = '10px';

      const img = document.createElement('img');
      img.src = src;
      img.style.maxWidth = '100px';

      const closeButton = document.createElement('span');
      closeButton.innerHTML = '&times;';
      closeButton.style.position = 'absolute';
      closeButton.style.top = '5px';
      closeButton.style.right = '5px';
      closeButton.style.background = 'rgba(0, 0, 0, 0.5)';
      closeButton.style.color = 'white';
      closeButton.style.borderRadius = '50%';
      closeButton.style.padding = '5px';
      closeButton.style.cursor = 'pointer';
      closeButton.addEventListener('click', () => {
        croppers.splice(index, 1);
        cropperElements.splice(index, 1);
        imgContainer.remove();
      });

      imgContainer.appendChild(img);
      imgContainer.appendChild(closeButton);
      croppedImagesContainer.appendChild(imgContainer);
    });

    $('#cropModal').modal('hide');
  }

  function previewImages() {
    const preview = document.getElementById('addedImagePreview');
    preview.innerHTML = '';
    const files = document.getElementById('ocs-productImage').files;

    if (files) {
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();

        reader.onload = (e) => {
          const imgContainer = document.createElement('div');
          imgContainer.style.position = 'relative';
          imgContainer.style.margin = '10px';

          const img = document.createElement('img');
          img.src = e.target.result;
          img.style.maxWidth = '100px';

          const closeButton = document.createElement('span');
          closeButton.innerHTML = '&times;';
          closeButton.style.position = 'absolute';
          closeButton.style.top = '5px';
          closeButton.style.right = '5px';
          closeButton.style.background = 'rgba(0, 0, 0, 0.5)';
          closeButton.style.color = 'white';
          closeButton.style.borderRadius = '50%';
          closeButton.style.padding = '5px';
          closeButton.style.cursor = 'pointer';
          closeButton.addEventListener('click', () => imgContainer.remove());

          imgContainer.appendChild(img);
          imgContainer.appendChild(closeButton);
          preview.appendChild(imgContainer);
        };

        reader.readAsDataURL(file);
      }
    }
  }

  function removeImage(button) {
    const imageContainer = button.parentElement;
    const imgElement = imageContainer.querySelector('img');
    const imgSrc = imgElement.src;

    

    const existingImagesContainer = document.getElementById('existingImagePreview');
    const addedImagesContainer = document.getElementById('addedImagePreview');

    if (existingImagesContainer.contains(imageContainer)) {
        console.log('Remove existing image: ' + imgSrc);
    } else if (addedImagesContainer.contains(imageContainer)) {
        const fileInput = document.getElementById('ocs-productImage');
        const dataTransfer = new DataTransfer();
        
        for (let i = 0; i < fileInput.files.length; i++) {
            const file = fileInput.files[i];
            const reader = new FileReader();
            
            reader.onload = (e) => {
                const fileDataURL = e.target.result;
                if (fileDataURL !== imgSrc) {
                    dataTransfer.items.add(file);
                }
            };

            reader.readAsDataURL(file);
        }

        fileInput.files = dataTransfer.files;
        imageContainer.remove();
    }
}


  function validateForm() {
    let isValid = true;

    const name = document.getElementById('exampleInputName1').value.trim();
    const category = document.getElementById('exampleSelectCategory').value.trim();
    const brand = document.getElementById('exampleSelectBrand').value.trim();
    const model = document.getElementById('exampleInputModel').value.trim();
    const material = document.getElementById('exampleInputMaterial').value.trim();
    const price = document.getElementById('exampleInputPrice').value.trim();
    const stock = document.getElementById('exampleInputStock').value.trim();
    const description = document.getElementById('exampleInputDescription').value.trim();

    if (!name) {
      document.getElementById('errorName').innerText = 'Name is required';
      isValid = false;
    } else {
      document.getElementById('errorName').innerText = '';
    }

    if (!category) {
      document.getElementById('errorCategory').innerText = 'Category is required';
      isValid = false;
    } else {
      document.getElementById('errorCategory').innerText = '';
    }

    if (!brand) {
      document.getElementById('errorBrand').innerText = 'Brand is required';
      isValid = false;
    } else {
      document.getElementById('errorBrand').innerText = '';
    }

    if (!model) {
      document.getElementById('errorModel').innerText = 'Model is required';
      isValid = false;
    } else {
      document.getElementById('errorModel').innerText = '';
    }

    if (!material) {
      document.getElementById('errorMaterial').innerText = 'Material is required';
      isValid = false;
    } else {
      document.getElementById('errorMaterial').innerText = '';
    }

    if (!price || price <= 0) {
      document.getElementById('errorPrice').innerText = 'Price is required, Price must be a positive number';
      isValid = false;
    } else {
      document.getElementById('errorPrice').innerText = '';
    }

    if (!stock || stock <= 0) {
      document.getElementById('errorStock').innerText = 'Stock is required and stock cannot be negative';
      isValid = false;
    } else {
      document.getElementById('errorStock').innerText = '';
    }

    if (!description) {
      document.getElementById('errorDescription').innerText = 'Description is required';
      isValid = false;
    } else {
      document.getElementById('errorDescription').innerText = '';
    }

    return isValid;
  }

  function clearValidationMessages() {
    const validationMessages = document.querySelectorAll('.validation-message');
    validationMessages.forEach((message) => message.innerText = '');
  }

  document.querySelectorAll('#productForm input, #productForm select, #productForm textarea').forEach((input) => {
    input.addEventListener('input', clearValidationMessages);
  });

  document.getElementById('productForm').addEventListener('submit', function (event) {
    if (!validateForm()) {
        event.preventDefault();
    } else {
        event.preventDefault(); 

        const form = event.target;
        const formData = new FormData(form);
        
        const oldImages = document.querySelectorAll('#addedImagePreview img');
        oldImages.forEach((img, index) => {
            const imgSrc = img.src;
            formData.append('existingImages', imgSrc);
        });

        formData.delete('image');

        croppers.forEach((cropper, index) => {
            const canvas = cropper.getCroppedCanvas();
            canvas.toBlob(blob => {
                formData.append('image', blob, `croppedImage${index}.png`);
            });
        });


        setTimeout(() => {
            fetch(form.action, {
                method: form.method,
                body: formData
            })
            .then(response => {
                if (response.ok) {
                    window.location.href = '/admin/products';
                } else {
                    alert('An error occurred while submitting the form');
                }
            })
            .catch(error => {
                console.error(error);
                alert('An error occurred while submitting the form');
            });
        }, 1000);
    }
});

</script>



<%- include('./adminFooter.ejs') %>
